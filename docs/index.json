[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/PeterTest.jsx",
    "content": "import React, { PureComponent, Fragment } from \"react\";\r\n/**\r\n * This is PeterTest\r\n */\r\nexport default class PeterTest extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        /**\r\n         * This is the state of the class\r\n         * @type {state}\r\n         * @private\r\n         */\r\n        this.state = {\r\n            times: 1,\r\n            color: \"black\"\r\n        };\r\n    }\r\n\r\n    /**\r\n     * I don't know what this does\r\n     * @param {props} nextProps \r\n     * @param {state} prevState \r\n     */\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        if (nextProps.times !== prevState.times || nextProps.color !== prevState.color) {\r\n            return {\r\n                times: (nextProps.times !== undefined) ? ((Number(nextProps.times) >= 1) ? Number(nextProps.times) : prevState.times) : prevState.times,\r\n                color: (nextProps.color !== undefined) ? nextProps.color : prevState.color\r\n            };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * This is the render method\r\n     * @returns The peter test repreated and in the color\r\n     */\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <h1 style={{fontFamily: \"sans-serif\"}}>Component: PeterTest</h1>\r\n                {[...Array(this.state.times)].map((_, index) =>\r\n                    <p key={index} style={{color: this.state.color, fontFamily: \"sans-serif\"}}>Look Peter the component works!</p>\r\n                )}\r\n            </Fragment>\r\n        );\r\n    }\r\n};\r\n",
    "static": true,
    "longname": "C:/Users/kien1/Documents/GitHub/kiwi/dev/peter-test/react/src/PeterTest.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "class",
    "name": "PeterTest",
    "memberof": "src/PeterTest.jsx",
    "static": true,
    "longname": "src/PeterTest.jsx~PeterTest",
    "access": "public",
    "export": true,
    "importPath": "peter-test/src/PeterTest.jsx",
    "importStyle": "PeterTest",
    "description": "This is PeterTest",
    "lineNumber": 5,
    "interface": false,
    "extends": [
      "react~PureComponent"
    ]
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/PeterTest.jsx~PeterTest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/PeterTest.jsx~PeterTest#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 3,
    "kind": "member",
    "name": "state",
    "memberof": "src/PeterTest.jsx~PeterTest",
    "static": false,
    "longname": "src/PeterTest.jsx~PeterTest#state",
    "access": "private",
    "description": "This is the state of the class",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "state"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 4,
    "kind": "method",
    "name": "getDerivedStateFromProps",
    "memberof": "src/PeterTest.jsx~PeterTest",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/PeterTest.jsx~PeterTest.getDerivedStateFromProps",
    "access": "public",
    "description": "I don't know what this does",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "props"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "state"
        ],
        "spread": false,
        "optional": false,
        "name": "prevState",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "method",
    "name": "render",
    "memberof": "src/PeterTest.jsx~PeterTest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/PeterTest.jsx~PeterTest#render",
    "access": "public",
    "description": "This is the render method",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "The peter test repreated and in the color"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The peter test repreated and in the color"
    },
    "params": []
  },
  {
    "kind": "index",
    "content": "# Team Kiwi's Conveyor Belt Repository\r\n\r\nWelcome to Kiwi's repository for generating a conveyor belt to build software the right way.\r\nWe have included in this repository different approaches to building our conveyor built\r\nin order to compare and contrast the strengths and weaknesses each technology has\r\nagainst the other. We compare React, Angular, Vue, and Web Components in order to determine\r\nwhich technology is most compatible with our team's skills and abilities. We also compare\r\nthese technologies to provide Peter, our client, a clearer understanding on how we reached\r\nour final decision on the technologies we decided upon.\r\n\r\n## Getting Started\r\nTo get started, clone our repository. \r\n\r\n``` \r\nTODO: Provide Steps how to run our different conveyor belts.\r\n```\r\n## Documentation Generation\r\nFor document generation, we are using ESDocs.\r\n\r\nFrom ESDocs' Website:\r\n```\r\nESDoc has two goals.\r\n\r\n- To make documentation maintenance comfortable and pleasant\r\n- To create easy-to-understand documentation.\r\n  In order to achieve this two goals, ESDoc produces a practical document, \r\n  measures the coverage, integrates the test code and more.\r\n```\r\nTo find out more about ESDocs, please visit: https://esdoc.org/manual/usage.html\r\n\r\nWe use ESDocs via its basic usage, such as:\r\n```\r\n/**\r\n * this is MyClass.\r\n */\r\nexport default class MyClass {\r\n  /**\r\n   * @param {number} a - this is a value.\r\n   * @param {number} b - this is a value.\r\n   * @return {number} result of the sum value.\r\n   */\r\n  sum(a, b){\r\n    return a + b;\r\n  }\r\n}\r\n```\r\nA list of tags that are available can be found here: https://esdoc.org/manual/tags.html\r\n\r\nNote: Please ensure you have ESDocs installed. If you do not have ESDocs installed,\r\nplease install by running the following commands:\r\n```\r\nnpm install esdoc esdoc-standard-plugin\r\n```\r\n\r\nIn order to view our docs, once you have set up the repository, run the commands\r\n```\r\n./node_modules/.bin/esdoc\r\nopen ./docs/index.html\r\n```\r\nThe documentation to all our different technologies we have compared and contrasted will open\r\nin your browser. There you may browse and read in more detail the code we wrote for each\r\ntechnology.\r\n\r\n# Use of Third Party Integration Tools\r\n\r\n## Codacy\r\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/8569c562e69145308e896348639cf8b7)](https://app.codacy.com/app/kiwi/kiwi?utm_source=github.com&utm_medium=referral&utm_content=aabadill/kiwi&utm_campaign=badger)\r\n\r\nWe use a static code analysis tool called Codacy in order to \r\nkeep our code consistent and as simple as possible.\r\nWe use this in order to track the progress of our code quality\r\nas the project progresses. This tool allows us to set goals\r\nwe can determine within our team and with our client to ensure code quality. Since people have different measures of quality,\r\nwe may dial it to our very own specificcations as to what quality means for us and our client. \r\nSome of the metrics we can fine tune are:\r\n\r\n    - Code Complexity\r\n    - File Structure Complexity\r\n    - Duplication of Code and Files\r\n    - Code Test Coverage\r\n    - Pull Requests, Commits, etc.\r\n    - Security Vulnerablity Analysis\r\n\r\nOnce we have set the standards we are to follow, the dashboard this tool provides will allow our client to visualize the quality of work we are completing with a letter grade rating.\r\n\r\nInternally, we use this to track everyone's contribution and quality of work by viewing what issues are introduced by whom and how often. In this way, we are able to track bugs in our code to avoid future repetitions of the same mistakes,\r\nand thus tune and refine our pipeline if needed.\r\n\r\nTo find out more about how Codacy works, please\r\nvisit the documentation page here: https://support.codacy.com/hc/en-us\r\n\r\n## Travis CI\r\n[![Build Status](https://travis-ci.org/aabadill/kiwi.svg?branch=master)](https://travis-ci.org/aabadill/kiwi)\r\n\r\nWe use Travis CI as our continuous integration tool. It allows us to centralize our builds and deployments. while adding another layer of quality checks through testing and deployment\r\nin a controlled environment, independer of any one's developer's\r\nlocal environment. Since we may control this independent environment the way we want, it allows us to have a separate\r\nenvironment where we may run our build process and incrementally add new features to our project. Not only this,\r\nwe can control what gets into the build in an incremental manner. \r\nWe perform a series of tests that make sure that what we develop will work in the proposed environment we agree\r\nupon with our client. It also allows us to perform code reviews so we can add a human aspect to how our code should\r\nbe in terms of quality, structure, and readability. \r\nLastly, we can automate many tasks that would otherwise require\r\nmuch developer time, saving our client time and money.\r\n\r\n# Testing\r\n\r\nFor testing, we are using Enzyme and Jest.\r\n\r\nSpecifically, we are using Enzyme to test that our\r\ncomponents render as they should. In other words,\r\nwe want to ensure that what we visualize with our client\r\nshows up in the user interface. We also perform a variety\r\nof other tests that which include that our components\r\nbehave as they should. \r\nFor example, when we set a specific color for text, does the\r\ntext actually change color? Does it render to the correct color? Etc.\r\n\r\nFurthermore, we use Jest because of their focus on snapshots for testing purposes. We use snapshots to stay consistent\r\nwith how we want our components to look. These snapshots allow us to optimize the underlying implementation of a component while testing that its appearance has not changed. Jest compares a previous \"snapshot\" of what our code rendered to\r\nand tests that our update does not change the appearance of the component. In this way, we are able to separate implementation tests from the rendering tests.\r\n\r\nWe recognize that performing tests that do not need to be performed is redudant and not time efficient. So, we have\r\nset up our pipeline so that tests only run when they should\r\nand are responsive to the changes made in the code base.\r\nIn other words, we run tests according to the chain of\r\ndependencies that the change will affect.\r\n\r\n# GitHub File Structure\r\n\r\nWe have organized our repository to make it easy to navigate\r\nby anyone who may want to look at our current work by using\r\nfamiliar names that are easy to understand and remember.\r\n\r\nWe have also made our best effort to keep different technologies separate so that they may not interfere with eachother with being run.\r\n\r\nThe following file structure roughly represents how we have organized our repository:\r\n\r\n    /Kiwi\r\n    - this is the topmost directory of our project\r\n    - here you will find configuration files to most of the\r\n      tools we use throughout our repository including TravisCI\r\n      Firebase, ESDocs, etc\r\n\r\n    /_tests_\r\n    - here you will find our React tests, which include our\r\n      Enzyme and Jest tests\r\n\r\n    /dev\r\n    - folder containts components that are currently under\r\n      development\r\n\r\n    /dev/peter-test\r\n    - this folder contains our use of different frameworks\r\n      for the purpose of comparing and contrasting the strengths and weaknesses of each framework\r\n    - Included frameworks: Angular, React, Vue, and \r\n      WebComponents\r\n\r\n    /docs\r\n    - this folder contains teh documentation to the components\r\n      under development as well as components that have reached\r\n      production\r\n    - docs are able to be viewed via a browser\r\n\r\n\r\n\r\n\r\n",
    "longname": "C:\\Users\\kien1\\Documents\\GitHub\\kiwi\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  }
]